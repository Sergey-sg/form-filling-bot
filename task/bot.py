import asyncio
import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from bs4 import BeautifulSoup
import random
import logging
from datetime import datetime
import time
from urllib.parse import urlsplit, urlunsplit, urlparse


from keyboards import frequency_keyboard, demo_duration_keyboard, admin_duration_keyboard, stop_keyboard, start_keyboard, admin_start_keyboard
from funcs import (generate_name,
                   generate_phone_number,
                   is_valid_url,
                   load_users_data,
                   get_user_status,
                   get_start_keyboard,
                   get_duration_keyboard,
                   is_valid_url_aiohttp,
                   load_users,
                   save_users,
                   register_user,
                   extract_domain,
                   is_demo_limit_reached,
                   users)
from funcs import status_translation

API_TOKEN = ''

# –î–∞–Ω—ñ –ø—Ä–æ–∫—Å—ñ
USE_PROXY_1 = True
PROXY_IP_1 = ''
PROXY_PORT_1 = ''
PROXY_LOGIN_1 = ''
PROXY_PASSWORD_1 = ''

USE_PROXY_2 = True
PROXY_IP_2 = ''
PROXY_PORT_2 = ''
PROXY_LOGIN_2 = ''
PROXY_PASSWORD_2 = ''

USE_PROXY_3 = True
PROXY_IP_3 = ''
PROXY_PORT_3 = ''
PROXY_LOGIN_3 = ''
PROXY_PASSWORD_3 = ''

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –±–æ—Ç–∞
user_state = {}
user_urls = {}
user_request_counter = {}
user_durations = {}  # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_frequencies = {}  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USERS_FILE = 'users.json'


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command('start'))
async def start_handler(message: Message):
    user_id = message.from_user.id
    register_user(user_id)

    user_state[user_id] = 'waiting_for_start'
    await message.answer(
        '‚ö°Ô∏è –ü—Ä–∏–≤—ñ—Ç! –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç—É —Ç–∏ –º–æ–∂–µ—à –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –±—É–¥—å —è–∫—ñ —Å–∞–π—Ç–∏ –∑ —Ñ–æ—Ä–º–æ—é\n'
        'üíé –ú–∏ –º–∞—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–µ–∂–∏–º–∏ –∑ –≤–∏–±–æ—Ä–æ–º —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫\n'
        'üí° –í—Å—ñ –ø–æ–ª—è, –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏, –≥–∞–ª–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º—ñ –Ω–∞ —Å–∞–π—Ç–∞—Ö –∑–∞–ø–æ–≤–Ω—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n'
        'üî• –¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –∑–∞–ø—É—Å–∫–∞–π –≤—ñ–¥–ø—Ä–∞–≤–∫—É!',
        reply_markup=get_start_keyboard(user_id)
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å" –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
@dp.message(lambda message: users.get(message.from_user.id, {}).get('status') == 'admin' and message.text == "üí† –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å")
async def change_status_handler(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'waiting_for_user_id'
    await message.answer("üë§ –í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å:")


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è Telegram ID –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
@dp.message(lambda message: user_state.get(message.from_user.id) == 'waiting_for_user_id')
async def handle_user_id_input(message: Message):
    user_id = message.from_user.id
    target_user_id = message.text.strip()
    user_status = get_user_status(user_id)

    if target_user_id.isdigit() and int(target_user_id) in users:
        user_state[user_id] = 'waiting_for_new_status'
        user_state['target_user_id'] = int(target_user_id)
        await message.answer(
            f"üö¶ –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(Current Status:{user_status}):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="demo")],
                    [KeyboardButton(text="unlim")],
                    [KeyboardButton(text="admin")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Telegram ID.")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(lambda message: user_state.get(message.from_user.id) == 'waiting_for_new_status')
async def handle_new_status_selection(message: Message):
    admin_id = message.from_user.id
    new_status = message.text.strip()
    target_user_id = user_state.get('target_user_id')

    if new_status in ["demo", "unlim", "admin"]:
        users[target_user_id]['status'] = new_status
        save_users(users)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {target_user_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {status_translation.get(new_status, new_status)}.", reply_markup=get_start_keyboard(admin_id))
        user_state[admin_id] = 'waiting_for_start'
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"
@dp.message(lambda message: message.text == "üßë‚Äçüíª –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def support_handler(message: Message):
    await message.answer("‚úâÔ∏è –î–ª—è –∑–≤ º—è–∑–∫—É –∑ –Ω–∞–º–∏ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ...")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ—ñ–ª—å"
@dp.message(lambda message: message.text == "ü§µ –ü—Ä–æ—Ñ—ñ–ª—å")
async def profile_handler(message: Message):
    user_id = message.from_user.id
    user_data = users.get(user_id, {})
    registration_date = user_data.get('registration_date')
    status = user_data.get('status', 'N/A')
    translated_status = status_translation.get(status, status)
    total_applications_sent = user_data.get('applications_sent', 0)

    if registration_date:
        days_since_registration = (datetime.now() - datetime.fromisoformat(registration_date)).days
        await message.answer(
            f"<b>ü§µ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
            f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: {translated_status}\n"
            f"ü™™ –í–∞—à Telegram ID: <code>{user_id}</code>\n"
            f"ü•á –ú–∏ —Ä–∞–∑–æ–º –≤–∂–µ {days_since_registration} –¥–Ω—ñ–≤\n"
            f"üì© –ó–∞–≥–∞–ª–æ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞—è–≤–æ–∫: {total_applications_sent}",
            parse_mode='HTML'
        )
    else:
        await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start")

# Whitelist
@dp.message(lambda message: message.text == "üîò Whitelist")
async def show_whitelist_menu(message: Message):
    user_id = message.from_user.id
    user_data = users.get(user_id, {})

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_data.get('status') == 'demo':
        await message.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –ø–ª–∞—Ç–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –±–æ—Ç—É.")
        return

    whitelist_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤")],
            [KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ñ—Ç–∞—é —É –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç—É! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=whitelist_keyboard)


@dp.message(lambda message: message.text == "–î–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω")
async def request_domain(message: Message):
    user_id = message.from_user.id
    user_data = users.get(user_id, {})
    user_domains = user_data.get('whitelist', [])

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_data.get('status') == 'demo':
        await message.answer("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ —É –ø–ª–∞—Ç–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –±–æ—Ç—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –Ω–∞ 3 –¥–æ–º–µ–Ω–∏
    if user_data.get('status') != 'admin' and len(user_domains) >= 3:
        await message.answer("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 3-—Ö –¥–æ–º–µ–Ω—ñ–≤.")
        return

    await message.answer("üì© –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç, –¥–æ–º–µ–Ω —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏.")
    user_state[user_id] = 'waiting_for_domain'


@dp.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤")
async def list_domains(message: Message):
    user_id = message.from_user.id
    user_data = users.get(user_id, {})
    user_domains = user_data.get('whitelist', [])

    if not user_domains:
        await message.answer("üìã –í–∞—à –≤–∞–π—Ç–ª–∏—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤
        domain_buttons = []

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É
        for domain in user_domains:
            domain_buttons.append([KeyboardButton(text=domain)])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω—É

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"
        domain_buttons.append([KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")])

        # –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        domain_keyboard = ReplyKeyboardMarkup(
            keyboard=domain_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–º–µ–Ω, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:", reply_markup=domain_keyboard)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –¥–æ–º–µ–Ω
@dp.message(lambda message: message.text in [domain for domain in users.get(message.from_user.id, {}).get('whitelist', [])])
async def delete_domain(message: Message):
    user_id = message.from_user.id
    domain_to_remove = message.text

    # –í–∏–¥–∞–ª—è—î–º–æ –¥–æ–º–µ–Ω –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    if domain_to_remove in users[user_id].get('whitelist', []):
        users[user_id]['whitelist'].remove(domain_to_remove)
        save_users(users)
        await message.answer(f"‚úÖ –î–æ–º–µ–Ω {domain_to_remove} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
    else:
        await message.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—à–æ–º—É –≤–∞–π—Ç–ª–∏—Å—Ç—ñ.")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–º–µ–Ω—ñ–≤
    await list_domains(message)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥"
@dp.message(lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'main_menu'  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞–Ω
    await message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_start_keyboard(user_id))


# Waiting fot domain
@dp.message(lambda message: user_state.get(message.from_user.id) == 'waiting_for_domain')
async def add_domain(message: Message):
    user_id = message.from_user.id
    user_domain = message.text

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–º–µ–Ω –∑ URL
    domain = urlparse(user_domain).netloc
    if domain.startswith('www.'):
        domain = domain[4:]

    # –î–æ–¥–∞—î–º–æ –¥–æ–º–µ–Ω –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users[user_id]['whitelist'] = users[user_id].get('whitelist', [])
    if domain not in users[user_id]['whitelist']:
        users[user_id]['whitelist'].append(domain)
        save_users(users)  # –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        await message.answer(f"‚úÖ –î–æ–º–µ–Ω {domain} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
    else:
        await message.answer("‚ùå –¶–µ–π –¥–æ–º–µ–Ω –≤–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    await show_whitelist_menu(message)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫"
@dp.message(lambda message:
    (user_state.get(message.from_user.id) == 'waiting_for_start' or user_state.get(message.from_user.id) == 'main_menu')
    and message.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫")
async def initiate_request(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫'")

    user_data = users.get(user_id, {})
    applications_sent = user_data.get('applications_sent', 0)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ª–∏—à–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É demo
    if user_data.get('status') == 'demo' and is_demo_limit_reached(user_id):
        await message.answer("‚ùå –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –≤ 50 –∑–∞—è–≤–æ–∫. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –∑–∞—è–≤–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
    if user_data.get('status') == 'demo':
        requests_to_send = 50 - applications_sent
        if requests_to_send <= 0:
            await message.answer("‚ùå –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –≤ 50 –∑–∞—è–≤–æ–∫. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        await message.answer(f'üåê –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –¥–æ {requests_to_send} –∑–∞—è–≤–æ–∫. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç:')
    else:
        await message.answer('üåê –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç:')

    user_state[user_id] = 'waiting_for_url'


# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç
@dp.message(lambda message: user_state.get(message.from_user.id) == 'waiting_for_url')
async def handle_url(message: Message):
    url = message.text
    user_id = message.from_user.id
    domain = extract_domain(url)  # –†–µ–∞–ª—ñ–∑—É–π—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É –∑ URL

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –¥–æ–º–µ–Ω —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for uid, data in users.items():
        if 'whitelist' in data and domain in data['whitelist']:
            await message.answer(f"‚ùå –î–æ–º–µ–Ω '{domain}' –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –¥–æ–º–µ–Ω.")
            return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ URL
    if is_valid_url(url):
        user_urls[user_id] = url
        user_state[user_id] = 'waiting_for_frequency'
        await message.answer("üï∞ –Ø–∫ —à–≤–∏–¥–∫–æ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑–∞—è–≤–∫–∏?", reply_markup=frequency_keyboard)
    else:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç")


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
@dp.message(lambda message: user_state.get(message.from_user.id) in ['waiting_for_frequency', 'waiting_for_duration'] and
              message.text in ["–ë–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏ üöÄ", "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ ‚è≥", "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Ö–≤–∏–ª–∏–Ω ‚åõ", "1 –∑–∞—è–≤–∫–∞ –≤ 60 —Ö–≤–∏–ª–∏–Ω ‚åõ",
                               "1 —Ö–≤–∏–ª–∏–Ω–∞ ‚è≥", "15 —Ö–≤–∏–ª–∏–Ω ‚è≥", "30 —Ö–≤–∏–ª–∏–Ω ‚è≥", "1 –≥–æ–¥–∏–Ω–∞ ‚è≥", "3 –≥–æ–¥–∏–Ω–∏ ‚è≥", "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ ‚è≥"])
async def handle_frequency_and_duration(message: Message):
    user_id = message.from_user.id
    user_data = users.get(user_id, {})

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏
    if user_state[user_id] == 'waiting_for_frequency':
        frequency = message.text
        user_frequencies[user_id] = frequency

        # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å "demo", –æ–±–∏—Ä–∞—î–º–æ —á–∞—Å—Ç–æ—Ç—É, —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
        if user_data.get('status') == 'demo':
            user_state[user_id] = 'active'
            await message.answer("üí´ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–Ω–∞. –í–∏–±—ñ—Ä —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ —É –¥–µ–º–æ —Å—Ç–∞—Ç—É—Å—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
            website_url = user_urls[user_id]
            await message.answer(f"üöÄ –ö–æ—Å–º—ñ—á–Ω–∏–π —à–∞—Ç–ª –∑ –∫—É–ø–æ—é –∑–∞—è–≤–æ–∫ –≤–∂–µ –ª–µ—Ç–∏—Ç—å –Ω–∞ —Å–∞–π—Ç: {website_url}", reply_markup=stop_keyboard)
            asyncio.create_task(request_loop(user_id, frequency, duration=None))  # –î–µ–º–æ: —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å None (–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å)
            return

        # –î–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
        user_state[user_id] = 'waiting_for_duration'
        await message.answer("‚è≥ –Ø–∫ –¥–æ–≤–≥–æ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑–∞—è–≤–∫–∏?", reply_markup=get_duration_keyboard(user_id))
        return

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    if user_state[user_id] == 'waiting_for_duration':
        duration_mapping = {
            "1 —Ö–≤–∏–ª–∏–Ω–∞ ‚è≥": 60,
            "15 —Ö–≤–∏–ª–∏–Ω ‚è≥": 15 * 60,
            "30 —Ö–≤–∏–ª–∏–Ω ‚è≥": 30 * 60,
            "1 –≥–æ–¥–∏–Ω–∞ ‚è≥": 60 * 60,
            "3 –≥–æ–¥–∏–Ω–∏ ‚è≥": 3 * 60 * 60,
            "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ ‚è≥": None  # –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
        }

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–µ–º–æ-—Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
        if user_data.get('status') != 'demo':
            user_durations[user_id] = duration_mapping[message.text]

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
        frequency = user_frequencies[user_id]
        user_state[user_id] = 'active'
        website_url = user_urls[user_id]
        await message.answer(f"üöÄ –ö–æ—Å–º—ñ—á–Ω–∏–π —à–∞—Ç–ª –∑ –∫—É–ø–æ—é –∑–∞—è–≤–æ–∫ –≤–∂–µ –ª–µ—Ç–∏—Ç—å –Ω–∞ —Å–∞–π—Ç: {website_url}", reply_markup=stop_keyboard)

        # –ó–∞–ø—É—Å–∫ request_loop –∑ –≤–∫–∞–∑–∞–Ω–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
        asyncio.create_task(request_loop(user_id, frequency, duration=user_durations.get(user_id)))

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç–∏
async def send_requests(user_id, frequency):
    delay_mapping = {
        "–ë–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏ üöÄ": 0,
        "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ ‚è≥": 10,
        "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Ö–≤–∏–ª–∏–Ω ‚åõ": 600,
        "1 –∑–∞—è–≤–∫–∞ –≤ 60 —Ö–≤–∏–ª–∏–Ω ‚åõ": 3600
    }

    delay = delay_mapping.get(frequency, 0)

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
    proxies = []
    if USE_PROXY_1:
        proxy_1 = f"http://{PROXY_LOGIN_1}:{PROXY_PASSWORD_1}@{PROXY_IP_1}:{PROXY_PORT_1}"
        proxies.append(proxy_1)
    if USE_PROXY_2:
        proxy_2 = f"http://{PROXY_LOGIN_2}:{PROXY_PASSWORD_2}@{PROXY_IP_2}:{PROXY_PORT_2}"
        proxies.append(proxy_2)
    if USE_PROXY_3:
        proxy_3 = f"http://{PROXY_LOGIN_3}:{PROXY_PASSWORD_3}@{PROXY_IP_3}:{PROXY_PORT_3}"
        proxies.append(proxy_3)

    attempts = 3  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±

    for attempt in range(attempts):
        proxy_url = random.choice(proxies) if proxies else None
        logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –ø—Ä–æ–∫—Å—ñ: {proxy_url}" if proxy_url else "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å—ñ.")

        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
            try:
                logger.info(f"–ù–∞–¥—Å–∏–ª–∞—î–º–æ GET –∑–∞–ø–∏—Ç –¥–æ: {user_urls[user_id]}")
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36'
                }

                async with session.get(user_urls[user_id], proxy=proxy_url, headers=headers) as response:
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status}")
                    if response.status != 200:
                        if attempt < attempts - 1:  # –Ø–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞
                            logger.warning("–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑...")
                            await asyncio.sleep(10)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                            continue  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ—á–∞—Ç–∫—É —Ü–∏–∫–ª—É
                        return f"–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É: {response.status}."

                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    form = soup.find('form')

                    if not form:
                        return "–§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."

                    action = form.get('action')
                    if action:
                        if not action.startswith('http'):
                            base_url = user_urls[user_id]
                            split_url = urlsplit(base_url)
                            base_url_without_query = urlunsplit((split_url.scheme, split_url.netloc, split_url.path.rstrip('/') + '/', '', ''))
                            action = f"{base_url_without_query}{action.lstrip('/')}"

                        logger.info(f"–§–æ—Ä–º–æ–≤–∞–Ω–∏–π URL –¥—ñ—ó: {action}")

                    data = {}
                    inputs = form.find_all('input')
                    for input_tag in inputs:
                        input_name = input_tag.get('name')
                        input_type = input_tag.get('type')

                        if input_type == 'name' or input_name == 'name':
                            data[input_name] = generate_name()

                        elif input_type == 'tel' or input_name == 'phone' or input_name == 'tel':
                            data[input_name] = generate_phone_number()

                        elif input_type == 'checkbox':
                            data[input_name] = 'on'

                    selects = form.find_all('select')
                    for select in selects:
                        select_name = select.get('name')
                        options = select.find_all('option')
                        valid_options = [option for option in options if option.get('value')]
                        if valid_options:
                            selected_option = random.choice(valid_options).get('value')
                            data[select_name] = selected_option

                    logger.info(f"–î–∞–Ω—ñ, —è–∫—ñ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ: {data}")

                    for post_attempt in range(attempts):
                        async with session.post(action, data=data, proxy=proxy_url) as post_response:
                            if post_response.status == 200:
                                logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ {action} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
                                user_request_counter[user_id] += 1
                                return None  # –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
                            else:
                                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {post_response.status}")
                                if post_attempt < attempts - 1:  # –Ø–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞
                                    await asyncio.sleep(10)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                                else:
                                    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É."

            except aiohttp.ClientError as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–∫—Å—ñ: {e}")
                if attempt < attempts - 1:  # –Ø–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞
                    await asyncio.sleep(10)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                else:
                    return "–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ–∫—Å—ñ."

    return None  # –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ


async def request_loop(user_id, frequency, duration):
    user_request_counter[user_id] = 0  # –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    delay_mapping = {
        "–ë–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏ üöÄ": 0,
        "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ ‚è≥": 10,
        "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Ö–≤–∏–ª–∏–Ω ‚åõ": 600,
        "1 –∑–∞—è–≤–∫–∞ –≤ 60 —Ö–≤–∏–ª–∏–Ω ‚åõ": 3600
    }

    delay = delay_mapping.get(frequency, 0)
    user_data = users[user_id]

    # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å demo, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—è–≤–æ–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–±–º–µ–∂—É—î—Ç—å—Å—è
    requests_to_send = 50 - user_data['applications_sent'] if user_data.get('status') == 'demo' else float('inf')

    # –û–±—á–∏—Å–ª–∏—Ç–∏ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è, —è–∫—â–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞
    end_time = None
    if duration is not None:
        end_time = time.time() + duration

    while user_state.get(user_id) == 'active' and requests_to_send > 0:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
        if end_time is not None and time.time() >= end_time:
            break

        error_message = await send_requests(user_id, frequency)
        if error_message:
            await bot.send_message(user_id, f"‚ùå {error_message}")
            user_state[user_id] = 'waiting_for_start'
            await bot.send_message(user_id, "‚¨áÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=start_keyboard)
            break

        if user_data.get('status') == 'demo':
            requests_to_send -= 1

        logger.info(f"–ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º: {delay} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(delay)

    if user_state.get(user_id) == 'active':
        user_state[user_id] = 'waiting_for_start'
        users[user_id]['applications_sent'] += user_request_counter[user_id]  # –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
        save_users(users)  # –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        await bot.send_message(user_id,
                               f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úâÔ∏è –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {user_request_counter[user_id]}",
                               reply_markup=start_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∑—É–ø–∏–Ω–∫–∏
@dp.message(lambda message: user_state.get(message.from_user.id) == 'active' and message.text == "–ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É ‚ùå")
async def stop_sending(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'waiting_for_start'
    total_requests = user_request_counter.get(user_id, 0)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—è–≤–æ–∫ —É users.json
    if user_id in users:
        users[user_id]['applications_sent'] += total_requests
        save_users(users)

    await message.answer(f"‚≠ïÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –∑—É–ø–∏–Ω–µ–Ω–∞\n‚úâÔ∏è –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {total_requests}", reply_markup=get_start_keyboard(user_id))

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
